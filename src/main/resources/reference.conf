akka {
  actor {
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill etc.)
      autoreceive = on
      # enable DEBUG logging of subscription changes on the eventStream
      event-stream = on
      # enable DEBUG logging of all LoggingFSMs for events, transitions and timers
      fsm = on
      # enable DEBUG logging of actor lifecycle changes
      lifecycle = on
      # enable function of LoggingReceive, which is to log any received message at
      # DEBUG level
      receive = on
      # enable DEBUG logging of unhandled messages
      unhandled = on
    }
  }
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  remote {
    # Logging of message types with payload size in bytes larger than
    # this value. Maximum detected size per message type is logged once,
    # with an increase threshold of 10%.
    # By default this feature is turned off. Activate it by setting the property to
    # a value in bytes, such as 1000b. Note that for all messages larger than this
    # limit there will be extra performance and scalability cost.
    log-frame-size-exceeding = 1000b
    # If this is "on", Akka will log all inbound messages at DEBUG level,
    # if off then they are not logged
    log-received-messages = off
    # If this is "on", Akka will log all outbound messages at DEBUG level,
    # if off then they are not logged
    log-sent-messages = off
  }
}
net {
  kolotyluk {
    leaderboard {
      akka {
        system {
          name = "leaderboard"
        }
      }
      rest {
        # 127.0.0.1 is normally the IP address assigned to the "loopback" or local-only interface.
        # This is a "fake" network adapter that can only communicate within the same host. It's often
        # used when you want a network-capable application to only serve clients on the same host.
        # A process that is listening on 127.0.0.1 for connections will only receive local connections
        # on that socket.
        # 0.0.0.0 has a couple of different meanings, but in this context, when a server is told to
        # listen on 0.0.0.0 that means "listen on every available network interface". The loopback
        # adapter with IP address 127.0.0.1 from the perspective of the server process looks just like
        # any other network adapter on the machine, so a server told to listen on 0.0.0.0 will accept
        # connections on that interface too.
        address = "0:0:0:0:0:0:0:0"
        # address = "foobar"
        port = 8080
      }
      maximumSpinCount = 100000
    }
  }
}